

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>WenQi Wei</title>
  <subtitle>这里是，way的世界！welcome！</subtitle>
  <updated>2025-04-03T19:02:29+08:00</updated>
  <author>
    <name>WenQi Wei</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 WenQi Wei </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>DeepKe开源框架实战2：从环境配置到项目运行的踩坑之路</title>
    <link href="http://localhost:4000/posts/Deepke%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%8E%B02/" rel="alternate" type="text/html" title="DeepKe开源框架实战2：从环境配置到项目运行的踩坑之路" />
    <published>2025-03-27T17:03:00+08:00</published>
  
    <updated>2025-03-27T17:57:56+08:00</updated>
  
    <id>http://localhost:4000/posts/Deepke%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%8E%B02/</id>
    <content type="text/html" src="http://localhost:4000/posts/Deepke%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%8E%B02/" />
    <author>
      <name>way-adventurer</name>
    </author>

  
    
    <category term="教程" />
    
  

  <summary>在人工智能快速发展的今天，将大语言模型与知识图谱技术相结合成为一个重要趋势。本文详细记录了在 DeepKE 框架下进行知识抽取的实践经验。


一、深入理解 In-Context Learning

1. ICL 原理解析

In-Context Learning (ICL) 是大语言模型的一个重要特性，它允许模型通过少量示例来理解并执行特定任务。在 DeepKE 中的实现主要包括：


  示例构造
    def prepare_examples(data_path: str, task_type: str, language: str) -&amp;amp;gt; List[Dict]:
 &amp;quot;&amp;quot;&amp;quot;构建上下文学习示例
 Args:
     data_path: 示例数据路径
     task_type: 任务类型 (ner/re/ee/rte)
     language: 语言类型 (en...</summary>

  </entry>

  
  <entry>
    <title>DeepKe开源框架实战1：从环境配置到项目运行的踩坑之路</title>
    <link href="http://localhost:4000/posts/Deepke%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%8E%B01/" rel="alternate" type="text/html" title="DeepKe开源框架实战1：从环境配置到项目运行的踩坑之路" />
    <published>2025-03-27T01:25:00+08:00</published>
  
    <updated>2025-03-27T01:25:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Deepke%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%8E%B01/</id>
    <content type="text/html" src="http://localhost:4000/posts/Deepke%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%8E%B01/" />
    <author>
      <name>way-adventurer</name>
    </author>

  
    
    <category term="教程" />
    
  

  <summary>DeepKE-LLM 是一个基于大型语言模型的知识抽取工具包，本文记录了我在实践 CodeKGC 项目时的探索历程和解决方案。


前言

在知识图谱构建领域，基于代码语言模型的方法越来越受到关注。DeepKE 项目中的 CodeKGC 模块提供了一种新颖的解决方案，通过将知识抽取任务转化为代码生成任务来实现。本文将详细记录我在实践这个项目时的经验，希望能为后来者提供参考。

项目概述

CodeKGC 是一个基于代码语言模型的知识图谱构建工具，其核心思想是将知识抽取转换为代码生成任务。项目位于 DeepKE 的 example/llm/CodeKGC 目录下。

项目特点


  创新的方法论
    
      使用代码语言模型进行知识抽取
      将关系抽取转化为代码生成
      支持灵活的模式定义
    
  
  完整的工具链
    
      提供数据预处...</summary>

  </entry>

  
  <entry>
    <title>DeepKe开源框架实战0：从环境配置到项目运行的踩坑之路</title>
    <link href="http://localhost:4000/posts/Deepke%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%8E%B00/" rel="alternate" type="text/html" title="DeepKe开源框架实战0：从环境配置到项目运行的踩坑之路" />
    <published>2025-03-24T10:30:00+08:00</published>
  
    <updated>2025-03-24T10:30:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Deepke%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%8E%B00/</id>
    <content type="text/html" src="http://localhost:4000/posts/Deepke%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%8E%B00/" />
    <author>
      <name>way-adventurer</name>
    </author>

  
    
    <category term="教程" />
    
  

  <summary>DeepKe是一个开源的知识图谱抽取与构建工具，基于深度学习技术，支持多种任务类型。本文记录了我在配置 DeepKe 环境时遇到的各种问题及解决方案。


前言

在知识图谱构建领域，DeepKe 作为一个强大的开源工具，吸引了我的注意。它不仅支持实体关系抽取、属性抽取等多种任务，而且基于 PyTorch 实现，具有良好的扩展性。本文将详细记录我从零开始配置 DeepKe 环境的全过程，希望能帮助遇到类似问题的同学。

环境配置详解

一、代码获取

首先，我们需要获取 DeepKe 的源代码。考虑到国内网络环境，我选择了从 Gitee 克隆代码：

git clone https://gitee.com/openkg/deepke.git


二、环境依赖问题的解决

在配置过程中，我遇到了 conda 命令无法使用的问题。这是一个典型的环境变量配置问题，解决过程如下：

1. 问...</summary>

  </entry>

  
  <entry>
    <title>从零搭建Web图片压缩工具：前端技术实战</title>
    <link href="http://localhost:4000/posts/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/" rel="alternate" type="text/html" title="从零搭建Web图片压缩工具：前端技术实战" />
    <published>2025-03-20T10:35:00+08:00</published>
  
    <updated>2025-03-21T10:44:51+08:00</updated>
  
    <id>http://localhost:4000/posts/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</id>
    <content type="text/html" src="http://localhost:4000/posts/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/" />
    <author>
      <name>way-adventurer</name>
    </author>

  
    
    <category term="实战项目" />
    
  

  <summary>在当今网络时代，图片压缩已成为前端开发中不可或缺的一环。本文将带你一步步实现一个纯前端的图片压缩工具，深入探讨其中的技术要点与实现思路。

一、项目概述

1.1 开发背景
随着高清图片的普及，图片体积越来越大，而网页加载速度却直接影响用户体验。因此，一个高效的图片压缩工具显得尤为重要。

1.2 技术选型

  前端框架：原生JavaScript (ES6+)
  UI组件：CSS Grid/Flexbox
  核心库：browser-image-compression
  文件处理：HTML5 File API


二、核心功能实现

2.1 文件拖拽上传
// 实现思路：监听拖拽事件，处理文件输入
const dropZone = document.getElementById(&amp;#39;dropZone&amp;#39;);
dropZone.addEventListener(&amp;#39;drop&amp;#39;, (e)...</summary>

  </entry>

  
  <entry>
    <title>Git 常用指令全攻略：掌握版本控制的艺术</title>
    <link href="http://localhost:4000/posts/%E5%B8%B8%E7%94%A8Git%E6%8C%87%E4%BB%A4/" rel="alternate" type="text/html" title="Git 常用指令全攻略：掌握版本控制的艺术" />
    <published>2025-03-19T10:35:00+08:00</published>
  
    <updated>2025-03-21T10:44:51+08:00</updated>
  
    <id>http://localhost:4000/posts/%E5%B8%B8%E7%94%A8Git%E6%8C%87%E4%BB%A4/</id>
    <content type="text/html" src="http://localhost:4000/posts/%E5%B8%B8%E7%94%A8Git%E6%8C%87%E4%BB%A4/" />
    <author>
      <name>way-adventurer</name>
    </author>

  
    
    <category term="教程" />
    
  

  <summary>在当今的软件开发领域，Git 早已成为不可或缺的版本控制系统。它如同一位智慧的守护者，默默记录着代码的每一次变迁，让团队协作变得高效而有序。无论是初出茅庐的开发者，还是经验丰富的技术专家，掌握 Git 的常用指令都是迈向高效开发的关键一步。本文将带你深入 Git 的世界，从基础到进阶，逐一剖析那些常用的 Git 指令，助你轻松驾驭版本控制的精髓。

一、初识 Git：搭建你的版本控制舞台

在踏上 Git 的旅程之前，我们需要先搭建好舞台。安装 Git 是一切的起点。对于 Windows 用户，可以从 Git 官方网站下载安装包，一路点击“Next”即可完成安装；Mac 用户则可以通过 Homebrew（brew install git）轻松搞定；Linux 用户更是简单，使用包管理器（如 apt、yum）就能安装。

安装完成后，别忘了配置你的 Git 环境。使用以下命令设置你的用...</summary>

  </entry>

</feed>


